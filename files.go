// Code generated by go-bindata.
// sources:
// index.html
// images/favicon.png
// css/skeleton.css
// DO NOT EDIT!

package main

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x56\xdd\x8a\xdb\x46\x14\xbe\x5f\xd8\x77\x38\x3b\xd0\x8b\xd2\xc8\x43\x4b\x0a\x65\x91\x54\x68\x92\x42\xa1\xd9\x2c\x38\x37\xbd\x9c\x8c\x8e\xa4\x21\xa3\x19\xa1\x19\xdb\xf5\xdd\xae\xfb\x17\xc8\xc5\xd2\xf6\xba\x7d\x83\x82\x1b\xea\x66\xcb\x36\x9b\x57\x38\xf3\x0a\x7d\x92\xa2\x91\x37\xb6\x37\x2f\xb0\x06\x83\x35\xe7\x67\x34\xdf\x77\xe6\x7c\x47\xe9\xd1\xc3\x27\x0f\x9e\x7e\x73\xfa\x08\x6a\xdf\xe8\xfc\xf0\x20\xed\xff\x41\x0b\x53\x65\x0c\x0d\x8b\x16\x14\x45\x7e\x78\x70\x78\x00\x90\x1e\x25\x09\x7c\x21\x9c\x92\x70\x2a\x2a\x84\x13\xc4\xc2\xf5\x8e\xff\xce\x7e\xbd\x83\x3f\x48\x92\x3c\x1e\xbb\x41\x2f\x40\xd6\xa2\x73\xe8\x33\x36\xf1\x65\xf2\x19\x1b\x3c\x5e\x79\x8d\x39\xfd\x46\x4b\x7a\x4d\xaf\x68\x49\x6f\xe8\x92\x56\x40\xbf\xd0\x32\xbc\xa0\x15\xfd\x03\xe1\x3c\x2c\xc2\xd9\xe0\x09\x3f\x86\x97\x10\x16\xe1\xbb\xb0\x80\xe3\x0f\x53\x3e\x64\x6f\x5e\x61\x44\x83\x19\x2b\xd0\xc9\x4e\xb5\x5e\x59\xc3\x40\x5a\xe3\xd1\xf8\x8c\xb1\xf7\xe2\xc4\xc4\xd7\xb6\xbb\x15\xf2\x8e\xe6\xc7\xf6\x99\xd2\x08\xe3\x16\xa5\x2a\x95\x84\xc7\xe8\xc5\xde\x70\x3d\x00\x9c\x2a\x9c\xb5\xb6\xf3\x5b\x10\x67\xaa\xf0\x75\x56\xe0\x54\x49\x4c\xe2\xe2\x1e\x28\xa3\xbc\x12\x3a\x71\x52\x68\xcc\x3e\xde\x61\xe1\xcb\x27\x27\x4f\xf7\x00\xb4\x56\xe6\x39\xd4\x1d\x96\x19\xab\xbd\x6f\xdd\x31\xe7\xa5\x35\xde\x8d\x2a\x6b\x2b\x8d\xa2\x55\x6e\x24\x6d\xc3\xa5\x73\x9f\x97\xa2\x51\x7a\x9e\x9d\x58\x6f\x3f\x1a\x0b\xe3\x18\x74\xa8\x33\xe6\xfc\x5c\xa3\xab\x11\xfd\x0e\x01\x0f\xc6\xe3\x7d\xc1\x7f\x1b\xc6\x9a\x10\xe9\x1c\x77\xcf\x51\xa3\xb7\x66\x24\x9d\xdb\xad\xaf\x98\x2a\x69\xcd\x5e\x41\xec\x0f\xcc\xc0\xcf\x5b\xcc\x98\x6a\x44\x85\xbc\x35\xd5\x0d\xda\x68\x70\xbc\x1c\x70\x8d\xa2\x87\x47\xc4\x29\x5f\x2b\x69\xfa\xcc\x16\xf3\x6d\x12\x4e\x3b\xd5\x88\x6e\x3e\x68\xea\xd7\x62\x6e\x27\x7e\x0f\x08\x29\xd4\x14\xa4\x16\xce\x65\xac\x6f\x6f\xa1\x0c\x76\x83\xc8\xed\x3a\x3b\x3b\xbb\x31\xef\x3a\xac\xc1\xa4\x16\xba\x04\x69\xf5\xa4\x31\x0c\xe2\xdd\xc9\x58\x23\xba\x4a\x99\xc4\xdb\xf6\x18\x3e\xf9\xf4\x83\x4d\x32\x40\x5a\xdf\xcf\xe9\xe7\x28\xd6\xd7\xbd\x5c\x87\x8b\x5b\xfa\x4c\xcb\x94\xd7\xf7\xb7\x33\xda\x9c\xfe\x08\x0b\x5a\xbe\x17\x08\xca\x14\xf8\xed\x28\x0e\xbc\x70\x41\xaf\xe8\x2a\x5c\xd0\x2a\x2c\xc2\x79\xb8\x00\x7a\x4b\x57\xbd\xfc\x87\xf3\xf0\x03\x5d\xd3\x15\xfd\x45\xab\x70\x46\xd7\xf4\x2f\x84\xf3\xbe\x29\xef\x41\x78\x11\xce\xe8\x32\x7c\x1f\x16\xd1\x4c\x97\x70\x53\x74\xa0\xdf\xe9\x0d\x2d\x81\xfe\x8e\x69\x0b\x08\x3f\xc5\xa0\x3f\x87\xe9\xf1\x12\xe8\x35\x2d\xe9\x6d\xdc\xb7\x9f\x37\x57\x40\x2b\x5a\x1d\xc1\x57\x25\xcc\xed\x04\x0c\x62\x01\xce\x36\x08\x35\xea\x16\x6a\xe5\x61\xd2\x82\xaf\x11\x52\xb1\x25\x32\xc7\x9c\xcf\x66\xb3\x51\x85\x7e\xd3\x5d\xb6\x61\xf9\x78\xbd\x82\xc2\xca\x49\x83\xc6\x8b\x7e\x12\xa5\x5c\xe4\xa3\x94\xb7\x9b\x4a\xf0\x42\x4d\x6f\xca\x15\x9f\x01\x62\x5d\xd7\xf6\xc3\x83\x78\x37\x1f\x99\x02\x1e\xae\x37\xba\xeb\x97\x32\xe5\xeb\xce\x4a\xf9\xfa\x73\xe6\xff\x00\x00\x00\xff\xff\xd5\x1d\x82\xe5\xe0\x08\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 2272, mode: os.FileMode(438), modTime: time.Unix(1519846725, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _imagesFaviconPng = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x00\x84\x04\x7b\xfb\x89\x50\x4e\x47\x0d\x0a\x1a\x0a\x00\x00\x00\x0d\x49\x48\x44\x52\x00\x00\x00\x20\x00\x00\x00\x20\x08\x06\x00\x00\x00\x73\x7a\x7a\xf4\x00\x00\x00\x01\x73\x52\x47\x42\x00\xae\xce\x1c\xe9\x00\x00\x04\x3e\x49\x44\x41\x54\x58\x09\xbd\x57\x5d\x68\x54\x57\x10\xfe\x76\xdd\x26\x96\x26\x69\x56\x0c\x5b\xd2\x58\x76\xa3\xb8\x68\xc4\x3e\xb8\x86\xb6\xf6\x2f\x10\xac\x24\x22\x35\x1a\xaa\x84\xfa\x12\x41\xcc\x8b\xa2\x08\x41\xd1\x90\xc8\x82\x55\x68\x69\x29\xab\xf4\x27\x0f\xda\x60\xfa\x62\x5b\x6b\x49\xdc\x07\x35\xf8\x53\xd1\x15\x91\x62\x64\x63\x4c\x82\xc6\xa5\x41\x64\x53\x13\xdb\x55\x92\xac\xdf\xdc\xdc\x5c\xef\xc6\xfb\x17\x70\x3b\x70\x38\x73\xcf\xcc\x99\x6f\xce\x9c\x73\xe6\xcc\x75\xc1\x39\xe5\xf8\xfd\xfe\x0a\x97\xcb\xb5\x86\x53\x16\xb3\x15\x93\x2f\x96\xe9\xe9\x74\x3a\xc1\x4e\x5a\x37\xf9\x93\x03\x03\x03\x67\xc9\x3f\x65\xb3\x25\x97\x9d\x06\x41\xdf\x70\xbb\xdd\xfb\xa8\x57\xc7\x56\x60\xa7\xaf\xca\x1f\xb1\x6f\x9b\x98\x98\x68\xa1\x33\x7f\x5b\xcd\xb1\x72\x20\x37\x10\x08\xec\xe1\xe4\x1d\x5c\xe9\x6b\x56\x46\xcc\x64\x8c\xc6\x63\xca\xbe\xec\xef\xef\x0f\xb3\x7f\x62\xa4\x67\xe8\x80\xac\x9a\xa0\xbf\xb0\xbd\x63\x34\x69\xa6\x63\x74\xe4\x32\xdb\x5a\xa3\x68\xbc\xe0\x00\x57\xbd\x94\xc0\x7f\x10\xa4\x64\xa6\x40\x36\xfa\x83\x94\x57\xf5\xf5\xf5\xfd\xa5\xd7\xcb\x70\x40\xdd\xef\xab\x54\x78\xd9\xe0\x53\x98\x83\x3c\x17\xcb\xf5\x91\x70\x4f\x49\xd8\xe7\x4a\xd8\xb3\x08\x2e\x50\x25\x2a\x46\xae\x7c\x08\xcd\x9a\xec\x00\x86\xbe\x89\x42\x39\xe9\x59\x25\x62\x94\x14\x16\x16\xa6\x87\x87\x87\xe5\xaa\x42\xd9\x02\xf5\xd0\xf5\x52\xe8\xe0\xb4\xfb\xd0\x10\x0e\x63\xf5\x87\x4b\xf0\x66\x41\x3e\x3c\x1e\x60\xec\xbf\x11\x0c\xdd\xef\xc1\xc5\xd3\xc7\xd1\x1c\xe9\xb0\x5d\x80\xdc\x0e\xb6\x05\xb2\x15\x8a\x03\xa5\xa5\xa5\x11\xce\xda\x6a\x3b\xd3\x57\x87\xdf\xa2\x2d\x58\x92\x67\xa1\x39\x7a\x07\xdf\x37\x7e\x8e\x03\x1d\x43\x16\x4a\x8a\xe8\x30\x0f\x64\x83\x9c\x81\x1c\x36\x47\xa1\x3f\x74\x6c\xb7\x35\xb8\xd8\xcd\x9b\x8f\xb7\x03\x85\xc2\xd9\x91\x60\xe6\x78\x18\xfe\x0a\x32\xf6\x19\x2e\xd8\x88\x95\xf3\x67\x6b\x46\x47\xef\x9c\xc5\xc1\xaf\x8e\x20\xfe\x6f\x11\xca\xdf\x5d\x85\xd5\x9f\x56\x22\x58\x44\x79\x22\x8a\xed\x91\xb8\xa6\x67\xc1\x14\x08\xb6\x87\xfb\x2e\xb9\x7d\x86\x94\x42\x34\xbc\x19\x6d\x5d\x93\xd3\x62\x5d\x1d\x88\x1c\x00\x6a\x1a\xc3\xf0\xdf\xf8\x06\xb6\xc1\x57\xd1\x04\x7b\x96\xd7\xeb\xdd\x45\xc6\xaf\x8e\x99\x77\x81\xf7\xb1\xb5\x76\x99\xb2\x5f\x80\x07\x8b\xaa\x6b\xb1\x28\xcf\x8d\xa1\x07\xd7\x91\x78\x38\x39\xed\xd6\x85\x33\xf8\xb3\x57\xb2\xaf\x63\x7a\xec\xe2\xf5\x8b\xd3\x81\x85\xb6\x53\x7c\xf5\x38\x7f\x69\x37\x94\xe7\x6f\x9a\x72\x2a\x79\x17\xd7\x2e\x9e\xc3\xaf\xc7\x8e\xe0\x44\xcc\xe9\xfa\x95\x57\xb4\xc7\xc5\x1b\x30\x42\x7b\x56\xe7\x5a\x83\x0b\x35\xfc\x80\xb6\x9d\x15\x5c\xbf\x39\x25\xae\x1c\xc5\xfa\x8d\xcd\x4e\xb7\x61\x54\x9f\x09\xcd\xad\xaa\x92\x58\x64\x33\x82\x55\xbb\x70\xea\x4a\x1c\xc9\x94\xb1\x7a\x71\xf9\x26\xb4\x7f\xed\xe8\x52\x89\x81\xb4\xf3\x2d\x30\xc0\x0b\x7d\x54\x83\xea\x9a\x5a\x54\x56\x96\xa3\xf8\xf9\x05\x01\x52\xd7\xf1\x59\xd9\x7a\xc4\x0c\xe6\xe8\x87\x98\x8c\x7a\x24\x02\x52\xc9\x38\xa2\x86\xc3\x47\x11\xae\x0b\x69\xba\xb1\xae\x13\x68\xde\xb6\x11\x1f\x94\xbd\x87\x53\x77\x4d\x42\xa2\x69\x1b\x32\x09\x71\xa0\xdb\x50\x34\x7d\x30\xd4\x84\x2d\x2b\x57\x60\x43\xcb\xcf\x88\x45\x8f\xa3\xa9\xbe\x06\x41\x9f\xaa\xe4\x5b\x01\xaf\xe4\x64\x8d\x5e\x81\x83\x9c\x2e\xda\xdd\x2e\x26\x83\x4f\x58\x72\x75\x6a\x73\x4d\x98\x70\xf4\x26\x36\xe8\x12\xd1\x94\xda\x58\x2a\x05\xcf\x6c\x7d\xfc\xb9\x03\xf1\x76\x94\x55\xed\x99\x52\x31\xed\xf9\x34\xaf\x72\xf3\x41\x90\x57\x49\x6a\x38\x4b\xba\x7f\xab\x17\x63\x06\x1a\xd3\xc1\x81\x07\xf8\x71\x9f\x3d\x38\x4d\x3d\x12\x6c\x79\x8e\xc7\x99\x8c\xde\x62\xbf\xdc\xc0\xbe\x36\x74\xb5\xb3\x1d\xdf\x9e\xbe\x0d\x6f\xd1\x5c\x14\xcd\x79\x1d\xf9\xaf\xca\x13\xa2\xa7\x31\x24\xe2\x5d\x38\xb4\x69\x0d\xbe\xcb\xa8\x79\xf4\x3a\x19\x7c\x6b\x32\x99\x3c\xa9\xbc\x86\x33\x7b\x8e\x55\x23\x3e\x1f\x42\xf3\xe6\x61\x84\x59\x24\x3f\x7f\x04\xf7\x62\x71\xa7\x77\x5f\xca\xf8\xcc\xe7\x58\x4c\x32\x23\xb6\x30\x23\xee\xcd\xf0\x31\x4b\x1f\x74\x60\x3f\x2b\x65\x29\xf5\x27\x0b\x12\x15\x47\xca\xf0\x73\x74\xe2\xa5\x54\xc2\x66\xbe\x13\xfc\x32\xc1\x3f\xa6\x5c\x29\xd3\xf5\x99\xf0\x09\x85\x6b\x29\x90\xea\x35\x5b\x34\xa8\x62\x68\xff\x08\x7a\x07\x20\x25\x12\x15\xaa\x89\x9e\x0d\x27\xc4\x66\x95\x60\xe8\x57\xa7\x1c\x42\xfd\x80\xf0\xea\xa1\xfc\x5f\x7e\x4c\xb4\xaa\x58\xef\x04\x2b\xd6\x51\xb6\x9f\xa4\x7a\xe5\x78\x88\xe7\x62\xfa\x9d\xd3\xab\x9b\xf2\x8c\xa6\x14\x07\x5f\x70\xcf\xeb\x69\xef\x1f\x23\x45\x43\x07\x54\xc5\x71\x29\x9d\xe9\x44\x2b\x1d\x90\xcc\x1a\x64\xd3\xea\x79\x23\x63\xba\x31\x49\x6c\xad\x74\x60\x1d\x43\xfe\x3b\xf9\x71\x9d\x2c\x83\x35\xdc\x82\x0c\x8d\xe7\x1f\x59\xf9\x3d\x7f\x06\x82\x92\x7e\xfa\xaa\x9c\x01\x75\x00\x00\x00\x00\x49\x45\x4e\x44\xae\x42\x60\x82\x01\x00\x00\xff\xff\xd5\xf3\x7a\x1f\x84\x04\x00\x00")

func imagesFaviconPngBytes() ([]byte, error) {
	return bindataRead(
		_imagesFaviconPng,
		"images/favicon.png",
	)
}

func imagesFaviconPng() (*asset, error) {
	bytes, err := imagesFaviconPngBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "images/favicon.png", size: 1156, mode: os.FileMode(438), modTime: time.Unix(1519846725, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _cssSkeletonCss = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x1a\x4d\x8f\xa4\xba\xf1\x1e\x29\xff\x81\xf4\x6a\xb4\xc9\x93\x61\xe9\x66\x60\x7a\x68\xe5\x29\xc9\x29\x91\x92\x77\x48\xde\xed\x69\x0e\x06\x8a\xc6\x59\x83\x89\x6d\x66\x7a\x96\xc7\x7f\x8f\x6c\x3e\xda\x06\xf7\xec\xae\xf6\x45\xc9\x21\x3b\x87\xc6\x55\xae\x72\x7d\xda\xe5\xf2\x7e\xf8\xee\x37\x5e\xc3\x78\x8d\x29\xf9\x04\x41\x2e\x84\xf7\x7c\x0c\xc2\x20\xf4\x7e\xf6\xfe\xf6\x97\x1f\xbd\xbf\x92\x1c\x1a\x01\xde\xcf\xde\x99\xc8\xaa\xcb\x82\x9c\xd5\x1f\x1a\xc8\x19\xc5\xe2\x83\x4d\xf7\xdd\x87\x4a\xd6\xb4\xa7\xa4\x01\xbf\x02\x72\xae\x64\xba\x0f\xf6\xf1\xc9\x7f\x81\xec\x23\x91\xbe\x84\x8b\xf4\x05\xf9\x04\x3e\x2e\xfe\xd9\x09\x99\xee\xc3\xf0\x6e\xc8\x58\xf1\xda\xd7\x98\x9f\x49\x93\x86\x43\xb5\xef\x4b\xd6\x8c\xd3\xd2\x03\xd4\xa7\x19\x13\x24\x0f\x50\x7b\xe1\x50\xf1\x3e\x63\x17\x85\x27\xcd\x39\xcd\x59\x23\xa1\x91\x7e\xc6\x2e\xa7\x69\xc9\xf0\xc4\x9e\x81\x97\x94\xbd\xa4\xcf\x44\x90\x8c\xc2\xd0\x72\x18\xb9\x96\xb8\x26\xf4\x35\xad\x59\xc3\x44\x8b\x73\x40\xde\xf2\x79\xba\x2e\xbb\x87\x7a\xc0\x7d\x86\xf3\x8f\x67\xce\xba\xa6\xf0\x73\x46\x19\x4f\x25\xc7\x8d\x68\x31\x87\x46\x0e\x38\xcb\xf8\x4f\x92\x48\x0a\x4f\x7d\xc6\x78\x01\xdc\xcf\x98\x94\xac\x4e\x1b\xd6\xc0\x49\x6b\x5a\x40\xce\x38\x96\x84\x35\x69\xd7\x14\xc0\x95\x5d\x6e\x63\xbc\x82\x49\x09\xc5\x90\x21\x21\x39\x6b\xce\xa3\xc0\x2f\xa3\x4e\x19\xa3\x05\xf0\x21\x67\x05\xa0\x8f\x59\x81\x04\xae\xdb\xaf\xd5\x48\xd4\x98\x52\xc3\xb8\xc7\xf0\x6e\x10\x5d\x86\x44\xd7\x1a\xd0\x87\xf8\xee\x64\x3a\x30\x3c\xb5\x4c\x10\x2d\x2a\x07\x8a\x25\x79\x86\xd3\x33\x70\x49\x72\x4c\x7d\x4c\xc9\xb9\x49\x33\x2c\x40\x91\x28\x6e\xfd\x64\x05\x3f\x0c\x0e\xb1\x5a\xb4\x6b\x7b\xc9\x5a\x35\x56\x43\x52\x9f\x67\x73\x09\xf9\x4a\x41\x5b\x6b\xc8\x3a\x29\x59\x83\x48\xd3\x76\x12\xb1\x56\x2a\xab\xb7\x48\x00\x85\x5c\x22\x65\x30\xcc\x01\x5b\xea\x92\xa6\x02\x4e\xa4\xa9\x61\x18\xda\x82\xeb\xc8\x5b\xc2\xca\x5c\xa2\xdf\xc4\xc7\x84\x1d\x57\xec\xb5\x8b\xb4\xb3\x4b\xc6\x6b\x4b\xc4\x9f\xe4\x6b\x0b\xbf\xdf\x8d\xa3\xdd\xd3\x3c\xe6\x20\x40\x5e\x87\xa2\xcb\x6a\x22\x77\x4f\xfd\x1c\xf8\xb8\x6d\x01\x73\xdc\xe4\x90\x8e\xa4\x13\xbf\x34\xf5\x6b\xf6\xc9\x2f\x59\xde\x09\x9f\x34\x0d\xf0\xf5\x0a\xb7\x67\x4c\x6b\xde\x9e\x30\x4b\xb1\x9d\xb1\x75\xc1\xa9\xc5\x45\xa1\xf2\x69\xb6\x94\x41\xc3\x49\x73\xde\x88\xe5\x46\xcf\x32\xb9\xb1\x8b\x40\x36\xba\x67\x9d\x54\x8e\x4b\xf7\xed\x65\x4a\x02\xef\x4f\x7a\x9d\x1f\xe1\x22\x87\x92\x00\x2d\x04\xc8\x7e\x11\x31\x88\x62\xb5\x13\x04\x0f\xe3\x4f\xa2\x03\x8d\xc2\x19\x9a\xc2\xdc\x1a\x96\xb4\xbc\x9c\xc6\xfc\x9d\x83\xa6\x20\xa2\xa5\xf8\x35\x95\x38\xa3\x70\xaa\xf1\xc5\x7f\x21\x85\xac\xc6\x10\x5a\x56\x39\xbd\x54\x44\x82\xaf\x33\x29\x1d\xf7\xb9\xa1\xe5\xec\xcc\x41\x88\xfe\x56\x06\x2c\xc1\xba\x84\x18\xee\x24\x1b\x26\x03\xe4\x15\xe4\x1f\x33\x76\x31\x02\x07\x17\x84\xed\x9e\x6e\x88\x7d\x75\xca\x34\xbd\xe9\xea\x0c\xb8\x76\xe9\x14\x59\xda\x9f\xbe\x68\x49\xe3\xdb\x21\xba\x9d\xca\x3a\x69\x4f\xed\xa7\x4c\x31\x45\x14\x80\x79\x5e\xb9\x43\x57\x29\xa7\xbd\x71\x9a\x3c\xe6\xb3\xb2\x14\x20\x53\xff\xd0\x5e\xd6\x0c\xae\xeb\x8e\x10\x63\xcf\x73\xf1\xd6\x49\x76\xa5\x29\x09\x05\xbf\x6b\x29\xc3\xc5\x2c\xec\xcd\x5c\xd2\x9b\xc0\xec\xdc\xa1\x00\x89\x09\x15\xfd\xec\xe4\x8c\xb2\xfc\xe3\x20\xba\xba\xc6\xfc\x75\x81\x52\x22\xa4\x4f\x24\xd4\x83\x84\xba\xa5\x58\xc2\x82\xd2\x92\xfc\x54\x91\xa2\x80\xe6\xc9\x86\xea\xd3\xed\xba\xe5\x24\x87\x20\x9e\x8e\x2f\x63\x1f\x52\xfb\xdc\x6a\x23\x4a\x4e\xe6\x5e\x7e\x1f\x86\x27\x73\x2f\xdb\xfd\xc0\x24\xf3\xfe\x81\x1b\xb1\x43\xbb\xbf\xb3\x8c\x49\xb6\x43\xbb\x3f\x03\x7d\x06\x15\x63\x3f\x40\x07\xe6\xd8\x1b\x01\xcb\x18\xfd\x91\x13\x4c\x91\xc0\x8d\xf0\x05\x70\x52\x4e\xd1\xfe\xee\x70\x38\x0c\xb8\x9f\x06\x7b\xc0\x50\x64\x03\x4e\x2b\x15\x99\x0b\x34\x7b\xcc\xf3\x58\x1d\xa9\xe3\x46\xe9\xab\xad\x3a\xe2\xcb\xa9\x3b\x9f\x69\x51\x10\x2b\xe0\x14\x9a\x63\xb6\x84\xf3\x50\xd1\xa8\xd4\x15\x8c\x92\xc2\x7b\x07\x7b\xf5\x37\x04\x9d\x5f\x76\x94\x8e\x93\x7b\x23\xc1\x9c\xa1\xae\xa6\xab\x44\x34\x48\x56\x79\x79\x93\xac\x55\x24\x5c\x59\xb6\x2f\x29\xc3\x32\xd5\xdf\x0b\x86\x42\x39\x23\xd4\xe7\x50\xed\x51\x75\x40\x55\x84\xaa\x7b\x54\xc5\xa8\x4a\x4c\xd5\xc3\x95\xde\x07\xa5\xb5\xe9\xbb\x28\x5c\x55\x28\xf7\x41\xc8\x37\xfe\x3e\x9c\x28\xc8\x31\xd9\x70\xae\x24\xf6\x83\x3d\x87\x7a\xa8\x0e\x06\x65\x14\x24\x0e\xca\xf8\x16\x69\x64\x91\x3a\x16\x8d\x6e\x51\xde\x9b\x05\x55\x70\xef\xa0\x74\x2c\x1a\x1e\x35\x6d\x6c\x45\xf6\x71\x4b\xeb\x22\x8d\x35\x69\x62\x27\xc5\x96\x34\x59\x93\x86\xc3\x1f\x6a\x28\x08\xf6\x7e\x5b\x93\x66\xf2\xbd\x17\xc7\x61\x7b\xf9\x5d\x6f\x19\x3d\xd6\xfa\xdb\xe6\xbc\x0f\x0e\x0e\x3b\x25\x1b\x0b\x44\x13\x6d\xbc\xb1\x8a\x4b\xe4\x61\x68\xad\xf8\x18\x02\x55\x70\x62\xa2\x0e\xd1\x6d\x5d\x64\x84\xeb\x35\x7a\x1f\x93\xb0\xbd\x2c\x85\x88\xa7\x36\xdb\xeb\xc6\xee\x1d\x14\xf2\x46\x6c\xe7\x8c\x76\x75\x83\xa6\x5f\x61\x26\xd1\x35\xa0\x6f\x10\x3b\x2c\x79\x1f\x6a\x4b\x1a\x1a\x8c\x88\x63\x6c\x9c\x7a\xc3\x1b\x3e\xd8\x52\x86\x77\x5b\x29\x27\x73\x29\xd9\xd2\xfb\x05\x9f\x96\x84\x0b\xe9\xe7\x15\xa1\xc5\x32\xd7\x04\x5a\x74\xe1\x10\xb0\x06\x16\xd6\xd7\xef\xd9\x08\xf7\x41\x92\x24\xc9\xc3\xdd\x10\xc8\x17\xb6\x36\x50\x14\x44\xea\x9f\x42\x56\x1c\xd6\xa4\x87\xc3\xdd\x10\x94\xac\xe3\x2b\x78\x14\x2e\x3c\x4b\xf2\xbc\xa6\x8a\x1e\x17\xa6\x82\x5c\xd6\xd2\x1c\x15\x18\x9e\xa1\x59\x21\xe2\x64\xe1\xa9\xa3\x7e\x85\x4e\xe2\x85\x69\x43\x36\x3a\x3e\x28\xeb\xc9\x0d\xcf\xe3\xe1\xca\x93\x3a\xd6\x7c\xdc\x5f\xd5\x7f\x51\x87\x84\x2b\x7e\xb6\xc6\xf6\x65\x45\x78\x31\xcd\xdd\x9a\x44\xbe\xb0\x71\x86\xb0\xa7\x18\x2a\x28\x26\x15\xa6\xa5\x3d\x41\xdb\x66\xac\x13\xfc\xec\xd5\xb7\xdc\xea\x80\xda\xf1\x73\x5c\xd6\xbf\xce\xbd\x3a\x1c\x39\xa1\x36\x87\xfd\xc3\x55\xbe\xeb\x64\x23\x2c\xd0\x0d\xb8\xcd\xe6\x90\x58\x0c\x8c\xf0\x41\x6e\xb0\x4d\x1e\xdd\x3b\x14\x31\xa2\x0c\xb9\xc1\xab\x64\x8a\x1c\xaa\x5c\x83\x11\x39\xa1\x36\x8b\xf8\x60\x13\x1b\xe1\x83\x6e\xc0\x6d\x06\x49\xe8\x50\xc4\x0c\x6d\x74\x03\xbe\x62\xf3\xe8\x50\xc5\x48\x01\xe4\x06\xdb\x4c\x1e\xec\xc8\x92\x4e\x55\xe4\x0d\x45\x8e\x89\x4b\x11\x7a\xc3\x20\xab\x44\x33\x19\x3d\xc6\x0e\x55\xd6\xf9\x84\xde\xc0\x7d\x41\xa4\x6c\x92\x0f\xbd\x85\xfc\x02\x53\xaf\x52\x75\x2d\x9e\x99\xc5\xeb\xf0\x31\x4e\xc0\x14\x97\x12\x38\x0a\xb8\xba\xe6\x8c\x9f\x9d\x9f\x97\xfd\xd4\x93\x49\x77\xbb\xd5\x55\x2b\xa7\x80\x79\x9a\x31\x59\x0d\xc1\x74\x5b\x99\x8a\xfb\x79\x1e\x69\x74\x8d\xa0\x8b\xf6\xb9\x9f\x13\x1d\x5b\xe3\x2a\xe4\x45\xea\xc4\x9c\xea\xd7\x38\x8e\xc7\x86\xca\x78\x0d\xcb\xa1\x91\xc0\xcd\xa6\xc0\xbe\xbd\x58\xf5\x5b\x12\x86\x56\x15\xa2\x79\xaf\xca\x10\x5d\x36\x9d\x56\x4d\x80\xae\x6d\x81\xe7\x58\x6c\x1b\x38\xfa\xfa\x6c\xdf\x15\x5f\x38\x6e\x4f\x6f\xb5\x8f\xe6\xd2\x59\x5d\xff\x3a\x91\xde\xeb\x1a\x40\x41\xcc\x42\x3a\xcb\xb2\x53\xde\x71\xc1\x78\xda\x32\xa2\x35\x73\x9f\xf5\xba\xa9\xb1\xba\x63\x23\x13\x38\xb7\x27\x4c\xd8\x7c\x93\xff\xbf\xe9\xbf\xc5\xf4\x53\x18\x8f\xb7\x2a\x64\x0e\xe6\x2b\x56\x14\x45\xf3\x92\x13\xe4\x78\x3c\xce\x17\xe8\x34\x74\x3a\x6f\x62\xe7\x70\xa1\x03\xb3\xb4\x64\xbe\x6a\xd9\x59\x70\xdd\x85\x41\xe6\xe0\x9b\x04\x1f\xd9\xb9\x04\xdf\x62\x16\xc1\xbf\x6a\xd9\x49\xf0\xe9\xc7\x6f\x39\x51\x17\x7b\xe4\x84\xce\x3c\xcb\xb2\xdc\xc6\xc4\xbb\x28\xca\xa3\x32\x5c\x2d\x36\x02\x9d\xca\xad\x97\x74\x68\xf9\xd6\x94\x59\xdd\x5f\x4c\x46\xb7\x25\xac\x50\x74\xe2\xde\x5e\x71\x6c\x14\xac\x56\x9c\xba\x07\x5f\x60\x95\xdb\xa1\xfb\xf9\x89\x37\x2c\xf4\xad\x52\xdf\xb0\x93\x19\xf9\x4e\xdc\x7f\xd6\x4e\x37\x33\xe5\xf3\x13\x6f\xd9\xe9\x17\x94\x1a\x6a\x4c\xe8\xea\xc4\x98\x3b\x8a\x16\x70\x6e\xf7\x59\x40\xb5\x4f\x6f\x40\x6b\x76\x1d\x5f\x43\x5a\x2c\xc4\x0b\xe3\xc5\xee\xa9\x77\x9d\x3f\x49\x7b\xf1\xf6\xfa\xba\xbc\x51\x4b\x2b\xbb\xd9\xc5\x8b\xbd\xfa\x73\x6e\xf8\x17\x5f\x54\xb8\x60\x2f\xe3\x11\xf2\xd9\x63\xf5\xbd\xb6\xc7\x7b\x4b\xdc\xf7\xa3\x3d\x56\xc0\xd1\x1e\x2b\xa0\xb2\xc7\x06\xb4\x66\xd7\xf1\x35\x64\xb6\xc7\xfb\xa7\xe5\x11\x64\x7e\xa2\xf8\x1f\xb3\xcf\x7f\x3d\x5e\x6e\x74\x94\x4f\xfa\xa5\x61\x0d\x5c\xb7\x9d\x97\xa6\xfd\xb7\x70\x39\xd5\xa4\x99\x4b\x9b\x24\xbe\xba\x45\xf7\x8d\x12\x63\x3c\xb5\x16\x93\xd6\x69\x41\x47\xba\x2f\x9d\xfc\x2d\x6a\x69\xb6\x6f\x51\xa3\x4d\x9d\x08\xf7\x32\xda\xbe\x0e\xf8\xd5\xca\xd3\x06\xb3\x0d\xa4\xe9\x94\xba\x1e\xd2\xb3\x45\x27\x76\x63\xd0\x7e\x39\x39\xc5\x19\x50\x34\xbd\xe8\x58\x8d\xfc\x55\x7f\x76\x6c\x2b\xae\xaa\x4c\xc7\x8b\xd1\xaa\x73\x6d\x19\xde\x78\x94\xb1\x76\xe3\xe9\x65\xc6\x2e\x8f\x47\xd1\xbe\x0f\xf4\x8f\xaf\x5b\xff\xce\xfa\xd9\xbc\x35\x6d\x85\x9c\x5e\x93\x3a\xda\xeb\x77\x88\xf1\x19\x2e\x27\x3c\xa7\xe0\x91\x46\x90\x02\x06\x66\xe1\x0a\xc8\x49\x8d\xe9\x84\x5c\x42\x69\x6c\xdf\x9c\xac\x06\x65\x47\xfb\xb7\xd1\x5e\x47\x51\x47\x3d\x46\xe7\x37\xf7\xb1\xd3\xe9\x85\xde\xf4\x11\x2d\xe2\xea\x42\xfe\x31\xbc\x1b\x98\x9a\x8f\x98\xa2\xfd\x0a\x2a\x4a\x7a\xdb\x5d\xba\x1f\x9d\xb3\x02\x16\xcf\xe8\xa6\xad\x37\x5a\x68\x69\x91\x06\x87\x0d\xaf\xb7\xab\xfc\xf4\x5d\xb9\x57\x7f\x8e\x3d\x6e\x7c\x8d\xd8\xee\x71\x43\xcb\xe1\x7b\x2d\x8a\x1d\x5f\xb3\x60\x4a\xd4\x49\x35\x6b\xed\x96\xc3\x20\x2b\x24\x8b\x45\x85\xfd\x41\xed\xbb\x2a\xe3\x8d\xeb\xd0\xd4\x99\x35\xff\x5f\xc0\xf6\x89\x44\x56\x56\x57\x54\x16\x56\x3f\xd4\xf6\xa2\x9a\x4c\xb1\x39\xf7\x3a\x5a\xa6\xf2\xf1\xc5\x7e\x7e\xac\x9e\xea\x03\x97\x13\xc6\xa7\xf6\xd5\xa9\x82\x96\xc4\x59\x51\x8c\xad\xf0\x96\x03\xd2\x46\xfa\x57\xc7\x24\xa0\x82\xa2\x92\x9c\x3b\x0e\x48\x5f\xee\x51\x8b\x3a\x15\x22\x48\xdd\xd9\x56\x0c\x0e\x23\x83\x5f\xff\xea\xdf\x01\x00\x00\xff\xff\xd3\x21\x19\xd8\x6b\x22\x00\x00")

func cssSkeletonCssBytes() ([]byte, error) {
	return bindataRead(
		_cssSkeletonCss,
		"css/skeleton.css",
	)
}

func cssSkeletonCss() (*asset, error) {
	bytes, err := cssSkeletonCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "css/skeleton.css", size: 8811, mode: os.FileMode(438), modTime: time.Unix(1519846725, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
	"images/favicon.png": imagesFaviconPng,
	"css/skeleton.css": cssSkeletonCss,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"css": &bintree{nil, map[string]*bintree{
		"skeleton.css": &bintree{cssSkeletonCss, map[string]*bintree{}},
	}},
	"images": &bintree{nil, map[string]*bintree{
		"favicon.png": &bintree{imagesFaviconPng, map[string]*bintree{}},
	}},
	"index.html": &bintree{indexHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
